{#
    SPDX-FileCopyrightText: NVIDIA CORPORATION & AFFILIATES
    Copyright (c) 2024-2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
    Apache-2.0
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
#}

{%- macro generate_dscp_to_tc_map_per_sku() -%}
    "DSCP_TO_TC_MAP": {
        "AZURE": {
            "0" : "0",
            "1" : "1",
            "2" : "1",
            "3" : "2",
            "4" : "2",
            "5" : "3",
            "6" : "3",
            "7" : "0",
            "8" : "0",
            "9" : "0",
            "10": "0",
            "11": "4",
            "12": "4",
            "13": "4",
            "14": "4",
            "15": "4",
            "16": "4",
            "17": "4",
            "18": "4",
            "19": "4",
            "20": "4",
            "21": "4",
            "22": "4",
            "23": "4",
            "24": "4",
            "25": "4",
            "26": "4",
            "27": "4",
            "28": "4",
            "29": "4",
            "30": "4",
            "31": "5",
            "32": "5",
            "33": "5",
            "34": "5",
            "35": "5",
            "36": "5",
            "37": "5",
            "38": "5",
            "39": "5",
            "40": "5",
            "41": "0",
            "42": "0",
            "43": "0",
            "44": "0",
            "45": "0",
            "46": "0",
            "47": "0",
            "48": "0",
            "49": "0",
            "50": "0",
            "51": "0",
            "52": "0",
            "53": "0",
            "54": "0",
            "55": "0",
            "56": "0",
            "57": "0",
            "58": "0",
            "59": "0",
            "60": "0",
            "61": "0",
            "62": "0",
            "63": "0"
        }
    },
{%- endmacro -%}
{%- macro generate_tc_to_pg_map_per_sku() -%}
    "TC_TO_PRIORITY_GROUP_MAP": {
        "AZURE": {
            "0": "0",
            "1": "0",
            "2": "0",
            "3": "0",
            "4": "0",
            "5": "0",
            "6": "0",
            "7": "0"
        }
    },
{%- endmacro -%}

{%- macro generate_scheduler_per_sku() -%}
    "SCHEDULER": {
        "scheduler_q0_downlink": {
            "type": "DWRR",
            "weight": "4"
        },
        "scheduler_q1_downlink": {
            "type": "DWRR",
            "weight": "8"
        },
        "scheduler_q2_downlink": {
            "type": "DWRR",
            "weight": "18"
        },
        "scheduler_q3_downlink": {
            "type": "DWRR",
            "weight": "22"
        },
        "scheduler_q4_downlink": {
            "type": "DWRR",
            "weight": "22"
        },
        "scheduler_q5_downlink": {
            "type": "DWRR",
            "weight": "22"
        },
        "scheduler_q0_uplink": {
            "type": "DWRR",
            "weight": "4"
        },
        "scheduler_q1_uplink": {
            "type": "DWRR",
            "weight": "8"
        },
        "scheduler_q2_uplink": {
            "type": "DWRR",
            "weight": "18"
        },
        "scheduler_q3_uplink": {
            "type": "DWRR",
            "weight": "22"
        },
        "scheduler_q4_uplink": {
            "type": "DWRR",
            "weight": "22"
        },
        "scheduler_q5_uplink": {
            "type": "DWRR",
            "weight": "22"
        }
    },
{%- endmacro -%}

{%- macro generate_single_queue_per_sku(port, direction) -%}
    "{{ port }}|0": {
        "scheduler": "scheduler_q0_{{ direction }}"
    },
    "{{ port }}|1": {
        "scheduler": "scheduler_q1_{{ direction }}",
        "wred_profile": "AZURE_LOSSY_{{ direction.upper() }}_Q1"
    },
    "{{ port }}|2": {
        "scheduler": "scheduler_q2_{{ direction }}",
        "wred_profile": "AZURE_LOSSY_{{ direction.upper() }}_Q2"
    },
    "{{ port }}|3": {
        "scheduler": "scheduler_q3_{{ direction }}",
        "wred_profile": "AZURE_LOSSY_{{ direction.upper() }}_Q3"
    },
    "{{ port }}|4": {
        "scheduler": "scheduler_q4_{{ direction }}",
        "wred_profile": "AZURE_LOSSY_{{ direction.upper() }}_Q4"
    },
    "{{ port }}|5": {
        "scheduler": "scheduler_q5_{{ direction }}",
        "wred_profile": "AZURE_LOSSY_{{ direction.upper() }}_Q5"
    },
    "{{ port }}|6": {
        "scheduler": "scheduler_q6_{{ direction }}"
    }
{%- endmacro -%}

{%- macro generate_global_dscp_to_tc_map() %}
{# This is an empty macro since the global DSCP_TO_TC map is not required #}
{%- endmacro %}

{# downlink Q use t0, uplink Q use t1 #}
{%- macro generate_wred_profiles() %}
    {%- set min_threshold = "166912" %}
    {%- if 'type' in DEVICE_METADATA['localhost'] %}
        {%- if DEVICE_METADATA['localhost']['type'] == 'ToRRouter' %}
            {%- set t0_max_threshold = "282624" %}
            {%- set t1_max_threshold = "239616" %}
        {%- elif DEVICE_METADATA['localhost']['type'] == 'LeafRouter' %}
            {%- set t0_max_threshold = "282624" %}
            {%- set t1_max_threshold = "239616" %}
        {%- endif %}
    {%- endif %}

    "WRED_PROFILE": {
        "AZURE_LOSSY_DOWNLINK_Q1" : {
            "wred_green_enable"      : "true",
            "wred_yellow_enable"     : "true",
            "wred_red_enable"        : "true",
            "ecn"                    : "ecn_all",
            "green_max_threshold"    : "{{ t0_max_threshold }}",
            "green_min_threshold"    : "{{ min_threshold }}",
            "yellow_max_threshold"   : "{{ t0_max_threshold }}",
            "yellow_min_threshold"   : "{{ min_threshold }}",
            "red_max_threshold"      : "{{ t0_max_threshold }}",
            "red_min_threshold"      : "{{ min_threshold }}",
            "green_drop_probability" : "5",
            "yellow_drop_probability": "5",
            "red_drop_probability"   : "5"
        },
        "AZURE_LOSSY_DOWNLINK_Q2" : {
            "wred_green_enable"      : "true",
            "wred_yellow_enable"     : "true",
            "wred_red_enable"        : "true",
            "ecn"                    : "ecn_all",
            "green_max_threshold"    : "{{ t0_max_threshold }}",
            "green_min_threshold"    : "{{ min_threshold }}",
            "yellow_max_threshold"   : "{{ t0_max_threshold }}",
            "yellow_min_threshold"   : "{{ min_threshold }}",
            "red_max_threshold"      : "{{ t0_max_threshold }}",
            "red_min_threshold"      : "{{ min_threshold }}",
            "green_drop_probability" : "5",
            "yellow_drop_probability": "5",
            "red_drop_probability"   : "5"
        },
        "AZURE_LOSSY_DOWNLINK_Q3" : {
            "wred_green_enable"      : "true",
            "wred_yellow_enable"     : "true",
            "wred_red_enable"        : "true",
            "ecn"                    : "ecn_all",
            "green_max_threshold"    : "{{ t0_max_threshold }}",
            "green_min_threshold"    : "{{ min_threshold }}",
            "yellow_max_threshold"   : "{{ t0_max_threshold }}",
            "yellow_min_threshold"   : "{{ min_threshold }}",
            "red_max_threshold"      : "{{ t0_max_threshold }}",
            "red_min_threshold"      : "{{ min_threshold }}",
            "green_drop_probability" : "5",
            "yellow_drop_probability": "5",
            "red_drop_probability"   : "5"
        },
        "AZURE_LOSSY_UPLINK_Q1" : {
            "wred_green_enable"      : "true",
            "wred_yellow_enable"     : "true",
            "wred_red_enable"        : "true",
            "ecn"                    : "ecn_all",
            "green_max_threshold"    : "{{ t1_max_threshold }}",
            "green_min_threshold"    : "{{ min_threshold }}",
            "yellow_max_threshold"   : "{{ t1_max_threshold }}",
            "yellow_min_threshold"   : "{{ min_threshold }}",
            "red_max_threshold"      : "{{ t1_max_threshold }}",
            "red_min_threshold"      : "{{ min_threshold }}",
            "green_drop_probability" : "5",
            "yellow_drop_probability": "5",
            "red_drop_probability"   : "5"
        },
        "AZURE_LOSSY_UPLINK_Q2" : {
            "wred_green_enable"      : "true",
            "wred_yellow_enable"     : "true",
            "wred_red_enable"        : "true",
            "ecn"                    : "ecn_all",
            "green_max_threshold"    : "{{ t1_max_threshold }}",
            "green_min_threshold"    : "{{ min_threshold }}",
            "yellow_max_threshold"   : "{{ t1_max_threshold }}",
            "yellow_min_threshold"   : "{{ min_threshold }}",
            "red_max_threshold"      : "{{ t1_max_threshold }}",
            "red_min_threshold"      : "{{ min_threshold }}",
            "green_drop_probability" : "5",
            "yellow_drop_probability": "5",
            "red_drop_probability"   : "5"
        },
        "AZURE_LOSSY_UPLINK_Q3" : {
            "wred_green_enable"      : "true",
            "wred_yellow_enable"     : "true",
            "wred_red_enable"        : "true",
            "ecn"                    : "ecn_all",
            "green_max_threshold"    : "{{ t1_max_threshold }}",
            "green_min_threshold"    : "{{ min_threshold }}",
            "yellow_max_threshold"   : "{{ t1_max_threshold }}",
            "yellow_min_threshold"   : "{{ min_threshold }}",
            "red_max_threshold"      : "{{ t1_max_threshold }}",
            "red_min_threshold"      : "{{ min_threshold }}",
            "green_drop_probability" : "5",
            "yellow_drop_probability": "5",
            "red_drop_probability"   : "5"
        }
    },
{%- endmacro %}

{%- macro generate_lossless_tc_list(lossless_tc_list) %}
{#
    This macro intentionally does nothing, leaving LOSSLESS_TC as an empty list
    Use the following to generate other lists like 3, 4
    {%- if lossless_tc_list.append('3') -%}{%- endif -%}
    {%- if lossless_tc_list.append('4') -%}{%- endif -%}
#}
{%- endmacro %}

{% macro generate_tc_to_dscp_map() %}
    "TC_TO_DSCP_MAP": {
        {% if 'type' in DEVICE_METADATA['localhost'] %}
            {%- if DEVICE_METADATA['localhost']['type'] == 'ToRRouter' -%}
                "AZURE_DOWNLINK_BT0": {
                    "8": "21"
                },
                "AZURE_UPLINK_BT0": {
                    "8": "11"
                }
            {%- elif DEVICE_METADATA['localhost']['type'] == 'LeafRouter' -%}
                "AZURE_DOWNLINK_BT1": {
                    "8": "11"
                }
            {% endif %}
        {% endif -%}
    },
{%- endmacro -%}

{%- macro generate_switch_trimming() -%}
    "SWITCH_TRIMMING": {
        "GLOBAL": {
            "size": "256",
            "tc_value": "8",
            "queue_index": "4"
        }
    },
{%- endmacro -%}

{%- include 'qos_config.j2' %}
